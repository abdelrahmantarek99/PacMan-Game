#include <SFML/Graphics.hpp>
#include <string>
#include <iostream>
#include <fstream>

using namespace std;
using namespace sf;

RenderWindow window(VideoMode(1008, 604), "SFML ");

int go, mouse_move, score;
Texture texture, mylevel, black, tee, te2, t_ghost1, t_ghost2, t_ghost3, t_ghost4;
Font font, font2;

String Player_score = "0", str_best = "Best_Score";
int level;
bool okay = 1, stop, stop2, stop3, stop4, del[20],del2[28];
Sprite sfruits[100];
Texture fruits[100];

Vector2i source(10, 0);
Text text(Player_score, font, 40), text2(str_best, font2, 30);

int ok;

Sprite  sahm(tee), s_ghost1(t_ghost1), s_ghost2(t_ghost2);
Sprite  sahm2(te2);
int enter, strt;
Sprite sprite(texture);
Sprite mylevel_(mylevel);
Sprite black_(black);
bool sokar[800][800];

bool valid(float x, float y)
{
	
	if ((x + 32 >= 55 && x <179) && (y + 32 >= 54 && y<89))
		return 0;
	//24
	if ((x + 32 >= 55 && x <179) && (y + 32 >= 416 && y<436))
		return 0;
	//25
	if ((x + 32 >= 224 && x <376) && (y + 32 >= 416 && y<436))
		return 0;
	//26
	if ((x + 32 >= 417 && x <547) && (y + 32 >= 416 && y<436))
		return 0;


	//2
	if ((x + 32 >= 226 && x <373) && (y + 32 >= 54 && y<89))
		return 0;

	//7
	if ((x + 32 >= 291 && x <309) && (y + 32 >= 92 && y<204))
		return 0;
	//23
	if ((x + 32 >= 291 && x <309) && (y + 32 >= 361 && y<377))
		return 0;
	//28
	if ((x + 32 >= 96 && x <118) && (y + 32 >= 474 && y<494))
		return 0;
	//27
	if ((x + 32 >= 0 && x <52) && (y + 32 >= 474 && y<494))
		return 0;
	//31
	if ((x + 32 >= 484 && x <503) && (y + 32 >= 474 && y<492))
		return 0;
	//32
	if ((x + 32 >= 548 && x <596) && (y + 32 >= 474 && y<492))
		return 0;
	//34

	if ((x + 32 >= 291 && x <309) && (y + 32 >= 473 && y<587))
		return 0;
	//4
	if ((x + 32 >= 55 && x <116) && (y + 32 >= 129 && y<147))
		return 0;
	//3

	if ((x + 32 >= 419 && x <546) && (y + 32 >= 54 && y<89))
		return 0;

	//6
	if ((x + 32 >= 224 && x <244) && (y + 32 >= 129 && y<206))
		return 0;
	//7-2
	if ((x + 32 >= 356 && x <373) && (y + 32 >= 129 && y<206))
		return 0;
	//35
	if ((x + 32 >= 356 && x <373) && (y + 32 >= 473 && y<550))
		return 0;


	//9
	if ((x + 32 >= 486 && x <546) && (y + 32 >= 129 && y<147))
		return 0;
	//5
	if ((x + 32 >= 160 && x <182) && (y + 32 >= 129 && y<375))
		return 0;
	//29
	if ((x + 32 >= 160 && x <182) && (y + 32 >= 417 && y<494))
		return 0;
	//21
	if ((x + 32 >= 160 && x <245) && (y + 32 >= 361 && y<377))
		return 0;

	//12
	if ((x + 32 >= 0 && x <160) && (y + 32 >= 262 && y<301))
		return 0;

	//11
	if ((x + 32 >= 0 && x <116) && (y + 32 >= 189 && y<224))
		return 0;

	//20

	if ((x + 32 >= 0 && x <116) && (y + 32 >= 342 && y<376))
		return 0;

	//8
	if ((x + 32 >= 420 && x <439) && (y + 32 >= 129 && y<375))
		return 0;
	//30
	if ((x + 32 >= 420 && x <439) && (y + 32 >= 417 && y<494))
		return 0;
	//33
	if ((x + 32 >= 226 && x <244) && (y + 32 >= 475 && y<550))
		return 0;
	//36
	if ((x + 32 >= 55 && x <245) && (y + 32 >= 531 && y<550))
		return 0;
	//37
	if ((x + 32 >= 356 && x <547) && (y + 32 >= 531 && y<550))
		return 0;

	//22
	if ((x + 32 >= 356 && x <439) && (y + 32 >= 361 && y<377))
		return 0;
	//10
	if ((x + 32 >= 481 && x <600) && (y + 32 >= 189 && y<224))
		return 0;
	//18
	if ((x + 32 >= 439 && x <600) && (y + 32 >= 262 && y<301))
		return 0;

	//19
	if ((x + 32 >= 481 && x <600) && (y + 32 >= 342 && y<376))
		return 0;
	//17
	if ((x + 32 >= 222 && x <277) && (y + 32 >= 245 && y<255))
		return 0;
	//16
	if ((x + 32 >= 318 && x <375) && (y + 32 >= 245 && y<255))
		return 0;
	//13
	if ((x + 32 >= 222 && x <236) && (y + 32 >= 245 && y<321))
		return 0;
	//15
	if ((x + 32 >= 364 && x <375) && (y + 32 >= 245 && y<321))
		return 0;
	//14
	if ((x + 32 >= 222 && x <375) && (y + 32 >= 310 && y<321))
		return 0;

	//left
	if ((x + 32 >= 0 && x <10) && (y + 32 >= 0 && y<590))
		return 0;
	//right
	if ((x + 32 >= 590 && x <600) && (y + 32 >= 12 && y<590))
		return 0;
	//up
	if ((x + 32 >= 12 && x <590) && (y + 32 >= 0 && y<14))
		return 0;
	//down
	if ((x + 32 >= 0 && x <590) && (y + 32 >= 590 && y<600))
		return 0;


	return 1;


}

void moving_pacman(int pos)
{
	float pox = sprite.getPosition().x;
	float poy = sprite.getPosition().y;
	float mo = .005*score;

	if (pos == 1)
	{

		if (valid(pox + .25 + mo, poy)) {
			sprite.move(.25 + mo, 0);
		}
	}
	else if (pos == 2)
	{
		if (valid(pox, poy + .25 + mo)) {
			sprite.move(0, .25 + mo);
		}
	}
	else if (pos == 3)
	{
		if (valid(pox - .25 - mo, poy)) {
			sprite.move(-.25 - mo, 0);
		}
	}
	else if (pos == 4)
	{
		if (valid(pox, poy - .25 - mo)) {
			sprite.move(0, -.25 - mo);
		}
	}
	pox = sprite.getPosition().x;
	poy = sprite.getPosition().y;
	//if(pox<=-32 && poy>=)


}

void st(int pos)
{
	if (pos == 5)
	{
		sahm.setPosition(380, 335);
	}
	else if (pos == 6)
	{
		sahm.setPosition(400, 385);
	}
	else if (pos == 7)
	{
		sahm.setPosition(420, 445);
	}

}

void moving_ghost()
{
	float pox = s_ghost1.getPosition().x;
	float poy = s_ghost1.getPosition().y;
	float pox2 = s_ghost2.getPosition().x;
	float poy2 = s_ghost2.getPosition().y;
	///to eat pacman

	if (abs(sprite.getPosition().x - pox) <= 20 && abs(sprite.getPosition().y - poy) <= 20)
		stop = 1;
	if (abs(sprite.getPosition().x - pox2) <= 20 && abs(sprite.getPosition().y - poy2) <= 20)
		stop2 = 1;

	//
	//to move automatically
	if (pox + .3 >= 560 || pox2 + .3 >= 560)
	okay = 1;
	else if (pox - .3 <= 10 || pox2 - .3 <= 10)
		okay = 0;

	if (!okay)
		s_ghost1.move(.3, 0), s_ghost2.move(.3, 0);
	else
		s_ghost1.move(-.3, 0), s_ghost2.move(-.3, 0);

}



/*void score()
{
float pox = sprite.getPosition().x;
float poy = sprite.getPosition().y;
int y = poy, x = pox;
int  v = pox,m = poy;

if (sokar[v][m] == 0)
{
sum_score++;
sokar[v][m] = 1;
}
//0-5
for (int j = 0; j < 600; j++)
for (int i = 0; i <600; i++)
{
if (sokar[j][i])
{
RectangleShape rect(Vector2f(22, 22));
rect.setPosition(Vector2f(j+2, i+2));
rect.setFillColor(Color::Black);
window.draw(rect);
}

}



}*/

void scoor()
{
	int scor = score;
	Player_score.clear();
	while (scor > 0)
	{
		int x = scor % 10;
		Player_score += (char)(x + '0');
		scor /= 10;
	}
	reverse(Player_score.begin(), Player_score.end());

}

void forloop(int start, int one, int two, int three, int four, int plus)
{
	for (int i = start; i<start + plus; i++)
	{
		fruits[i].loadFromFile("ddddd.png");
		sfruits[i].setTexture(fruits[i]);
		sfruits[i].setTextureRect(IntRect(one, two, three, four));
		if (plus<4)
			sfruits[i].setScale(2, 2);
		else
			sfruits[i].setScale(1.6, 1.5);



	}


}

void set_fruits()
{ ///red sweets
	sfruits[0].setPosition(22, 150);
	sfruits[1].setPosition(550, 560);
	sfruits[2].setPosition(324, 447);
	sfruits[3].setPosition(380, 150);

	forloop(0, 121, 35, 15, 16, 4);
	////

	///banana
	sfruits[4].setPosition(20, 55);
	sfruits[5].setPosition(125, 480);
	sfruits[6].setPosition(451, 454);
	sfruits[7].setPosition(380, 210);
	forloop(4, 18, 35, 15, 16, 4);
	////

	///donate
	sfruits[8].setPosition(446, 555);
	sfruits[9].setPosition(295, 20);
	sfruits[10].setPosition(19, 393);
	sfruits[11].setPosition(500, 100);

	forloop(8, 35, 35, 15, 16, 4);
	////

	///burger
	sfruits[12].setPosition(250, 555);
	sfruits[13].setPosition(250, 180);
	sfruits[14].setPosition(185, 330);
	sfruits[15].setPosition(550, 55);
	forloop(12, 53, 35, 15, 16, 4);
	////

	//gift 
	forloop(16, 257, 35, 15, 16, 1);
	sfruits[16].setPosition(124, 225);


	//egg
	sfruits[17].setPosition(20, 305);
	sfruits[18].setPosition(124, 20);
	sfruits[19].setPosition(150, 555);
	sfruits[20].setPosition(555, 393);
	forloop(17, 70, 35, 15, 16, 4);
	//coin
	sfruits[21].setPosition(555, 305);
	sfruits[22].setPosition(185, 150);
	sfruits[23].setPosition(490, 20);
	sfruits[24].setPosition(317, 555);
	forloop(21, 87, 35, 15, 16, 4);
	//shoce
	sfruits[25].setPosition(20, 555);
	sfruits[26].setPosition(380, 325);
	sfruits[27].setPosition(150, 95);
	sfruits[28].setPosition(555, 150);
	forloop(25, 103, 35, 15, 16, 4);


}
void draw_fn()
{
	float tox = sprite.getPosition().x;
	float toy = sprite.getPosition().y;
	window.draw(mylevel_);
	if (!stop && !stop2)
		window.draw(sprite);

	window.draw(s_ghost1);
	window.draw(s_ghost2);
	//0
	if (tox+32 >= 23 && tox <= 23+16 && toy+32 >= 152 && toy <= 152+16 && !del[0])
		del[0] = 1, score += 10;
	//1
	if (tox+32 >=  550 && tox <= 550+ 16 && toy+32 >= 560 && toy <= 560 + 16 && !del[1])
		del[1] = 1, score += 10;
	//2
	if (tox+32 >= 324 && tox <= 324+ 16 && toy+32 >= 447  && toy <= 447 + 16 && !del[2])
		del[2] = 1, score += 10;
	//3
	if (tox+32 >= 380 && tox <= 380+ 16 && toy+32 >= 150  && toy <= 150+ 16 && !del[3])
		del[3] = 1, score += 10;
	//4
	if (tox+32 >= 20 && tox <= 20 + 16 && toy+32 >= 55&& toy <= 55 + 16 && !del[4])
		del[4] = 1, score += 10;
	//5
	if (tox +32>=  125 && tox <= 125 + 16 && toy+32 >= 480 && toy <= 480+ 16 && !del[5])
		del[5] = 1, score += 10;
	//6
	if (tox +32>= 451 && tox <= 451 + 16 && toy+32 >= 454  && toy <= 454 + 16 && !del[6])
		del[6] = 1, score += 10;
	//7
	if (tox +32>=  380 && tox <= 380+ 16 && toy+32 >= 210 && toy <= 210 + 16 && !del[7])
		del[7] = 1, score += 10;
	//8
	if (tox +32>= 446 && tox <= 446+ 16 && toy +32>= 555 && toy <= 555 + 16 && !del[8])
		del[8] = 1, score += 10;
	//9
	if (tox +32>= 295 && tox <= 295+ 16 && toy+32 >= 20 && toy <= 20+ 16 && !del[9])
		del[9] = 1, score += 10;
	//10	
	if (tox+32 >= 19 && tox <= 19+ 16 && toy+32 >= 393 && toy <= 393+ 16 && !del[10])
		del[10] = 1, score += 10;
	//11
	if (tox +32>= 500 && tox <= 500 + 16 && toy+32>= 100 && toy <= 100 + 16 && !del[11])
		del[11] = 1, score += 10;
	//12
	if (tox+32 >=250 && tox <= 250+ 16 && toy+32 >= 555 && toy <= 555+ 16 && !del[12])
		del[12] = 1, score += 10;
	//13
	if (tox+32 >=250&& tox <= 250+ 16 && toy+32 >= 180 && toy <= 180 + 16 && !del[13])
		del[13] = 1, score += 10;
	//14
	if (tox+32 >= 185 && tox <= 185+ 16 && toy+32 >= 330 && toy <= 330 + 16 && !del[14])
		del[14] = 1, score += 10;
	//15
	if (tox+32 >= 550 && tox <= 550 + 16 && toy+32 >= 55 && toy <= 55+ 16 && !del[15])
		del[15] = 1, score += 10;
	//16
	if (tox+32 >= 124 && tox <= 124+ 16 && toy+32 >= 225 && toy <= 225 + 16 && !del[16])
		del[16] = 1, score += 10;

	//17
	if (tox+32 >= 20&& tox <= 20+16 && toy+32 >= 305 && toy <= 305+16 && !del2[17])
		del2[17] = 1, score += 10;
	//18
	if (tox+32 >= 124 && tox <= 124 + 16 && toy+32 >= 20 && toy <= 20+16 && !del2[18])
		del2[18] = 1, score += 10;
	//19
	if (tox+32 >= 150 && tox <= 150+16 && toy+32 >= 555 && toy <=555+16 && !del2[19])
		del2[19] = 1, score += 10;
	//20
	if (tox+32 >= 555 && tox <= 555 + 16 && toy+32 >= 393 && toy <= 393+16 && !del2[20])
		del2[20] = 1, score += 10;
	//21
	if (tox+32 >=555 && tox <= 555 + 16 && toy+32 >= 305&& toy <= 305+16 && !del2[21])
		del2[21] = 1, score += 10;
	//22
	if (tox+32 >=185 && tox <= 185 + 16 && toy+32 >= 150 && toy <= 150+16 && !del2[22])
		del2[22] = 1, score += 10;
	//23
	if (tox +32>=490 && tox <= 490 + 16 && toy+32 >= 20 && toy <= 20+16 && !del2[23])
		del2[23] = 1, score += 10;
	//24
	if (tox+32 >=317 && tox <= 317+ 16 && toy+32 >= 555  && toy <= 555+16 && !del2[24])
		del2[24] = 1, score += 10;
	//25
	if (tox+32 >= 20 && tox <= 20+ 16 && toy +32>= 555&& toy <= 555+16 && !del2[25])
		del2[25] = 1, score += 10;
	//26
	if (tox +32>=380 && tox <= 380+16 && toy+32 >= 325&& toy <= 325+16 && !del2[26])
		del2[26] = 1, score += 10;
	//27
	if (tox+32 >= 150&& tox <= 150+16 && toy+32 >= 95 && toy <= 95+16 && !del2[27])
		del2[27] = 1, score += 10;
	//28
	if (tox+32 >=555 && tox <= 555+16 && toy+32 >= 150 && toy <= 150+16 && !del2[28])
		del2[28] = 1, score += 10;


	if (del[0] == 0)
	window.draw(sfruits[0]);
	if (del[1] == 0)
	window.draw(sfruits[1]);
	if (del[2] == 0)
	window.draw(sfruits[2]);
	if (del[3] == 0)
	window.draw(sfruits[3]);
	if (del[4] == 0)
	window.draw(sfruits[4]);
	if (del[5] == 0)
	window.draw(sfruits[5]);
	if (del[6] == 0)
	window.draw(sfruits[6]);
	if (del[7] == 0)
	window.draw(sfruits[7]);
	if (del[8] == 0)
	window.draw(sfruits[8]);
	if (del[9] == 0)
	window.draw(sfruits[9]);
	if (del[10] == 0)
	window.draw(sfruits[10]);
	if (del[11] == 0)
	window.draw(sfruits[11]);
	if (del[12] == 0)
	window.draw(sfruits[12]);
	if (del[13] == 0)
	window.draw(sfruits[13]);
	if (del[14] == 0)
	window.draw(sfruits[14]);
	if (del[15] == 0)
	window.draw(sfruits[15]);
	if (del[16] == 0)
	window.draw(sfruits[16]);
	if (del2[17] == 0)
	window.draw(sfruits[17]);
	if (del2[18] == 0)
	window.draw(sfruits[18]);
	if (del2[19] == 0)
	window.draw(sfruits[19]);
	if (del2[20] == 0)
	window.draw(sfruits[20]);
	if (del2[21] == 0)
	window.draw(sfruits[21]);
	if (del2[22] == 0)
	window.draw(sfruits[22]);
	if (del2[23] == 0)
	window.draw(sfruits[23]);
	if (del2[24] == 0)
	window.draw(sfruits[24]);
	if (del2[25] == 0)
	window.draw(sfruits[25]);
	if (del2[26] == 0)
	window.draw(sfruits[26]);
	if (del2[27] == 0)
	window.draw(sfruits[27]);
	if (del2[28] == 0)
	window.draw(sfruits[28]);
	window.draw(text);
	window.draw(text2);
}


int main()
{
	string str2 = Player_score; int intt, neww = 0;
	ifstream project2("projject.txt");

	while (project2 >> str2 >> intt)
	{
		neww = intt;
	}
	if (score>neww)
	{
		ofstream project("projject.txt");
		project << str2 << " " << score;

		project.close();

	}

	go = 5;
	mylevel.loadFromFile("level 2.png");
	texture.loadFromFile("chompersprites.png");
	tee.loadFromFile("chompersprites.png");
	te2.loadFromFile("interface.png");
	sahm.setPosition(380, 335);
	set_fruits();

	t_ghost1.loadFromFile("chompersprites.png");
	s_ghost1.setTextureRect(IntRect(0, 95, 30, 32));
	s_ghost1.setPosition(300, 380);

	t_ghost2.loadFromFile("chompersprites.png");
	s_ghost2.setTextureRect(IntRect(65, 31, 30, 32));
	s_ghost2.setPosition(300, 20);
	///
	font.loadFromFile("arial.ttf");
	font2.loadFromFile("arial.ttf");

	text.setFillColor(Color::Blue);
	text.setStyle(Text::Bold);
	text.setPosition(650, 10);
	text2.setFillColor(Color::Red);
	text2.setStyle(Text::Bold);
	text2.setPosition(610, 200);

	sprite.setPosition(290, 440);

	while (window.isOpen())
	{

		Event event;
		while (window.pollEvent(event))
		{
			switch (event.type)
			{
			case Event::Closed:
				window.close();
				break;


			}
			if (Keyboard::isKeyPressed(Keyboard::Key::Right))
			{
				go = 1;
				source.y = 0;
			}
			if (Keyboard::isKeyPressed(Keyboard::Key::Down))
			{
				go = 2;
				source.y = 1;
			}
			if (Keyboard::isKeyPressed(Keyboard::Key::Left))
			{
				go = 3;
				source.y = 2;
			}
			if (Keyboard::isKeyPressed(Keyboard::Key::Up))
			{
				go = 4;
				source.y = 3;
			}
			if (!level) {
				if (Keyboard::isKeyPressed(Keyboard::Key::Num1))
				{
					go = 5;
				}
				if (Keyboard::isKeyPressed(Keyboard::Key::Num2))
				{
					go = 6;
				}
				if (Keyboard::isKeyPressed(Keyboard::Key::Num3))
				{
					go = 7;
				}
				if (Keyboard::isKeyPressed(Keyboard::Key::Space))
				{
					if (go == 5)
						level = 1;
					else if (go == 7)
					{
						return 0;
					}
					go = 0;
				}
			}

		}

		sahm2.setTextureRect(IntRect(0, 0, 1007, 604));
		window.clear();
		if (level == 1) {
			moving_pacman(go);
			moving_ghost();

			if (sprite.getPosition().x >= 590)
				sprite.setPosition(10, sprite.getPosition().y);

			else if (sprite.getPosition().x <= 0)
				sprite.setPosition(590, sprite.getPosition().y);


			if (mouse_move == 0)
				source.x++;
			if (source.x >= 12)
				source.x = 10;
			mouse_move++;
			if (mouse_move == 100)
				mouse_move = 0;
			sprite.setTextureRect(IntRect(source.x * 32, source.y * 32, 32, 32));

			mylevel_.setTextureRect(IntRect(0, 0, 600, 600));
			scoor();
			text.setString(Player_score);
			text2.setString(str_best);
			draw_fn();
		}
		else
		{
			int	py = sahm.getPosition().y;

			st(go);

			sahm.setTextureRect(IntRect(source.x * 32, source.y * 32, 32, 32));

			window.draw(sahm2);

			window.draw(sahm);
		}
		window.display();



	}

	return 0;
}